
//! Autogenerated weights for `pallet_auctions`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-15, STEPS: `1`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `cl0w-mbp.fritz.box`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/basilisk
// benchmark
// pallet
// --pallet
// pallet_auctions
// --extrinsic
// *
// --output
// pallets/auctions/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight}};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_auctions`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_auctions::WeightInfo for WeightInfo<T> {
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: Auctions NextAuctionId (r:1 w:1)
	// Storage: Auctions AuctionOwnerById (r:0 w:1)
	// Storage: Auctions Auctions (r:0 w:1)
	fn create_english() -> Weight {
		Weight::from_ref_time(27_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Auctions Auctions (r:1 w:1)
	fn update_english() -> Weight {
		Weight::from_ref_time(15_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Auctions Auctions (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: Auctions AuctionOwnerById (r:0 w:1)
	fn destroy_english() -> Weight {
		Weight::from_ref_time(24_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Auctions Auctions (r:1 w:1)
	// Storage: System Account (r:3 w:3)
	// Storage: Auctions ReservedAmounts (r:1 w:2)
	fn bid_english() -> Weight {
		Weight::from_ref_time(41_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Auctions Auctions (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: NFT Collections (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	// Storage: Auctions AuctionOwnerById (r:0 w:1)
	fn close_english() -> Weight {
		Weight::from_ref_time(53_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
}
