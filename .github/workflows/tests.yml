name: build-and-deploy

on:
  workflow_dispatch:
  pull_request:

jobs:
  pop-runner-instance:
    name: create and setup infrastructure for branch
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      IS_LOCAL: ${{ github.event.pull_request.head.repo.fork == false }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_SECRET: ${{ secrets.EC2_PWD }}
      S3_BACKEND_KEY_NAME: tf-state-${{ github.sha }}
    outputs:
      runner: ${{ steps.determine-runner.outputs.runner }}
    steps:
      - id: determine-runner
        name: Determine runner
        run: if $IS_LOCAL; then echo "::set-output name=runner::${{ github.sha }}"; else echo "::set-output name=runner::ubuntu-latest"; fi;
      - name: checkout code
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: actions/checkout@v2.1.0
      - name: setup node
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: hashicorp/setup-terraform@v1
        if: ${{ env.IS_LOCAL == 'true' }}
        with:
          terraform_version: 0.12.25
      - name: rewrite tf state key
        id: tf-state-key
        if: ${{ env.IS_LOCAL == 'true' }}
        working-directory: ./infrastructure
        run: sed -i 's/BRANCH_ACTOR_KEY/${{ env.S3_BACKEND_KEY_NAME }}/g' infra.tf
      - name: Terraform Init
        if: ${{ env.IS_LOCAL == 'true' }}
        id: init
        working-directory: ./infrastructure
        run: terraform init
      - name: Terraform plan
        if: ${{ env.IS_LOCAL == 'true' }}
        id: plan
        working-directory: ./infrastructure
        run: terraform plan -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ steps.determine-runner.outputs.runner }}"
      - name: Terraform apply
        if: ${{ env.IS_LOCAL == 'true' }}
        id: apply
        working-directory: ./infrastructure
        run: terraform apply -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ steps.determine-runner.outputs.runner }}" -auto-approve
      - name: Sleep for 20 seconds
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: jakejarvis/wait-action@master
        with:
          time: '20s'

  build:
    needs: pop-runner-instance
    runs-on: ${{ needs.pop-runner-instance.outputs.runner }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - run: git describe --tags --abbrev=0 --always
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-02-17
          target: wasm32-unknown-unknown
          override: true
          default: true
      - name: Tests
        run: time cargo test --all --release --verbose --locked
      - name: Build release
        run: time cargo build --release --verbose
      - name: Version info
        run: ./target/release/basilisk --version
      - name: Upload release binary
        uses: actions/upload-artifact@v2
        with:
          name: basilisk
          path: target/release/basilisk
      - name: Upload release wasm
        uses: actions/upload-artifact@v2
        with:
          name: basilisk_runtime.wasm
          path: target/release/wbuild/basilisk-runtime/basilisk_runtime.compact.wasm

  destroy-runner-instance:
    name: destroy infra
    runs-on: ubuntu-latest
    needs: build
    if: ${{ always() && github.event.pull_request.head.repo.fork == false }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_SECRET: ${{ secrets.EC2_PWD }}
      S3_BACKEND_KEY_NAME: tf-state-${{ github.sha }}
    steps:
      - name: checkout code
        uses: actions/checkout@v2.1.0
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.25
          continue-on-error: false
      - name: rewrite tf state key
        id: tf-state-key
        working-directory: ./infrastructure
        run: sed -i 's/BRANCH_ACTOR_KEY/${{ env.S3_BACKEND_KEY_NAME }}/g' infra.tf

      - name: Terraform Init
        id: init
        working-directory: ./infrastructure
        run: terraform init
        continue-on-error: false

      - name: Terraform apply
        id: apply
        working-directory: ./infrastructure
        run: terraform destroy -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ needs.pop-runner-instance.outputs.runner }}" -auto-approve
        continue-on-error: false

  test-inclusion:
    needs: destroy-runner-instance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/download-artifact@v2
        name: Download basilisk binary
        with:
          name: basilisk
          path: target/release
      - uses: robinraju/release-downloader@v1
        name: Download relay chain binary
        with:
          repository: paritytech/polkadot
          tag: v0.9.1
          fileName: polkadot
          out-file-path: ../polkadot/target/release
      - run: chmod +x ./basilisk && ./basilisk --version
        name: Basilisk version
        working-directory: target/release
      - run: .chmod +x ./polkadot && ./polkadot --version
        name: Polkadot version
        working-directory: ../polkadot/target/release/polkadot
      - uses: actions/setup-node@v2
        name: Setup node.js
        with:
          node-version: '14'
      - run: ./install_polkadot_launch.sh
        name: Setup polkadot launch
        working-directory: scripts
      - run: polkadot-launch config.json &
        name: Launch rococo local
        working-directory: rococo-local
      - run: npm install && npm start 1000
        name: Wait for parachain inclusion
        working-directory: scripts/wait-for-inclusion
