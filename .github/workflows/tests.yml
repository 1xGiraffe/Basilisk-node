name: build-and-deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:
  pull_request:

jobs:
  pop-runner-instance:
    name: create and setup infrastructure for branch
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      IS_LOCAL: ${{ github.event.pull_request.head.repo.fork == false }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_SECRET: ${{ secrets.EC2_PWD }}
      S3_BACKEND_KEY_NAME: tf-state-${{ github.sha }}
    outputs:
      runner: ${{ steps.determine-runner.outputs.runner }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - id: determine-runner
        name: Determine runner
        run: if $IS_LOCAL; then echo "::set-output name=runner::${{ github.sha }}"; else echo "::set-output name=runner::ubuntu-latest"; fi;
      - name: checkout code
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: actions/checkout@v2.1.0
      - name: setup node
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: hashicorp/setup-terraform@v1
        if: ${{ env.IS_LOCAL == 'true' }}
        with:
          terraform_version: 0.12.25
      - name: rewrite tf state key
        id: tf-state-key
        if: ${{ env.IS_LOCAL == 'true' }}
        working-directory: ./infrastructure
        run: sed -i 's/BRANCH_ACTOR_KEY/${{ env.S3_BACKEND_KEY_NAME }}/g' infra.tf
      - name: Terraform Init
        if: ${{ env.IS_LOCAL == 'true' }}
        id: init
        working-directory: ./infrastructure
        run: terraform init
      - name: Terraform plan
        if: ${{ env.IS_LOCAL == 'true' }}
        id: plan
        working-directory: ./infrastructure
        run: terraform plan -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ steps.determine-runner.outputs.runner }}"
      - name: Terraform apply
        if: ${{ env.IS_LOCAL == 'true' }}
        id: apply
        working-directory: ./infrastructure
        run: terraform apply -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ steps.determine-runner.outputs.runner }}" -auto-approve
      - name: Sleep for 20 seconds
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: jakejarvis/wait-action@master
        with:
          time: '20s'

  build:
    needs: pop-runner-instance
    runs-on: ${{ needs.pop-runner-instance.outputs.runner }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - run: git describe --tags --abbrev=0 --always
      - name: Install Rust
        uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: nightly-2021-06-01
          target: wasm32-unknown-unknown
          override: true
          default: true
      - name: Install clippy
        run: rustup component add clippy
      - name: Run clippy
        run: make clippy
        continue-on-error: false
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Test && Generate code coverage
        run: make coverage
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
      - name: Build runtime
        run: cargo build --release --locked
        working-directory: runtime
      - name: Build node
        run: cargo build --release --locked
      - name: Version info
        run: ./target/release/basilisk --version
      - name: Upload release binary
        uses: actions/upload-artifact@v2
        with:
          name: basilisk
          path: target/release/basilisk
      - name: Upload release wasm
        uses: actions/upload-artifact@v2
        with:
          name: basilisk_runtime.compact.compressed.wasm
          path: target/release/wbuild/basilisk-runtime/basilisk_runtime.compact.compressed.wasm

  destroy-runner-instance:
    name: destroy infra
    runs-on: ubuntu-latest
    needs: test-inclusion
    if: ${{ always() && github.event.pull_request.head.repo.fork == false }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_SECRET: ${{ secrets.EC2_PWD }}
      S3_BACKEND_KEY_NAME: tf-state-${{ github.sha }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.25
          continue-on-error: false
      - name: rewrite tf state key
        id: tf-state-key
        working-directory: ./infrastructure
        run: sed -i 's/BRANCH_ACTOR_KEY/${{ env.S3_BACKEND_KEY_NAME }}/g' infra.tf

      - name: Terraform Init
        id: init
        working-directory: ./infrastructure
        run: terraform init
        continue-on-error: false

      - name: Terraform apply
        id: apply
        working-directory: ./infrastructure
        run: terraform destroy -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ needs.pop-runner-instance.outputs.runner }}" -auto-approve
        continue-on-error: false

  test-inclusion:
    needs: [pop-runner-instance, build]
    runs-on: ${{ needs.pop-runner-instance.outputs.runner }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/download-artifact@v2
        name: Download basilisk binary
        with:
          name: basilisk
          path: target/release
      - uses: robinraju/release-downloader@v1
        name: Download relay chain binary
        with:
          repository: paritytech/polkadot
          tag: v0.9.12
          fileName: polkadot
          out-file-path: ../polkadot/target/release
      - run: chmod +x ./basilisk && ./basilisk --version
        name: Basilisk version
        working-directory: target/release
      - run: chmod +x ./polkadot && ./polkadot --version
        name: Polkadot version
        working-directory: ../polkadot/target/release
      - uses: actions/setup-node@v2
        name: Setup node.js
        with:
          node-version: '14'
          check-latest: true
      - run: ./install_polkadot_launch.sh
        name: Setup polkadot launch
        working-directory: scripts
      - run: npm install
        name: Setup wait script
        working-directory: scripts/wait-for-inclusion
      - run: yarn start ../../rococo-local/config.json & cd ../wait-for-inclusion && npm start 200
        name: Launch rococo local & wait for inclusion
        working-directory: scripts/polkadot-launch

  version-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: master

      - name: Check old node version
        uses: thebongy/version-check@v1
        with:
          file: node/Cargo.toml
          tagFormat: ${version}
        id: node_old
      - name: set version
        run: echo "node_old=${{ steps.node_old.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: Check old primitives version
        uses: thebongy/version-check@v1
        with:
          file: primitives/Cargo.toml
          tagFormat: ${version}
        id: primitives_old
      - name: set version
        run: echo "primitives_old=${{ steps.primitives_old.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: Check old runtime version
        uses: thebongy/version-check@v1
        with:
          file: runtime/basilisk/Cargo.toml
          tagFormat: ${version}
        id: runtime_old
      - name: set version
        run: echo "runtime_old=${{ steps.runtime_old.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: Check old testing_runtime version
        uses: thebongy/version-check@v1
        with:
          file: runtime/testing-basilisk/Cargo.toml
          tagFormat: ${version}
        id: testing_runtime_old
      - name: set version
        run: echo "testing_runtime_old=${{ steps.testing_runtime_old.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: Check old common_runtime version
        uses: thebongy/version-check@v1
        with:
          file: runtime/common/Cargo.toml
          tagFormat: ${version}
        id: common_runtime_old
      - name: set version
        run: echo "common_runtime_old=${{ steps.common_runtime_old.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: Check old asset-registry version
        uses: thebongy/version-check@v1
        with:
          file: pallets/asset-registry/Cargo.toml
          tagFormat: ${version}
        id: asset_registry_old
      - name: set version
        run: echo "asset_registry_old=${{ steps.asset_registry_old.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: Check old duster version
        uses: thebongy/version-check@v1
        with:
          file: pallets/duster/Cargo.toml
          tagFormat: ${version}
        id: duster_old
      - name: set version
        run: echo "duster_old=${{ steps.duster_old.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: Check old exchange version
        uses: thebongy/version-check@v1
        with:
          file: pallets/exchange/Cargo.toml
          tagFormat: ${version}
        id: exchange_old
      - name: set version
        run: echo "exchange_old=${{ steps.exchange_old.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: Check old lbp version
        uses: thebongy/version-check@v1
        with:
          file: pallets/lbp/Cargo.toml
          tagFormat: ${version}
        id: lbp_old
      - name: set version
        run: echo "lbp_old=${{ steps.lbp_old.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: Check old nft version
        uses: thebongy/version-check@v1
        with:
          file: pallets/nft/Cargo.toml
          tagFormat: ${version}
        id: nft_old
      - name: set version
        run: echo "nft_old=${{ steps.nft_old.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: Check old offchain_duster version
        uses: thebongy/version-check@v1
        with:
          file: pallets/offchain-duster/Cargo.toml
          tagFormat: ${version}
        id: offchain_duster_old
      - name: set version
        run: echo "offchain_duster_old=${{ steps.offchain_duster_old.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: Check old tx_multi_payment version
        uses: thebongy/version-check@v1
        with:
          file: pallets/transaction-multi-payment/Cargo.toml
          tagFormat: ${version}
        id: tx_multi_payment_old
      - name: set version
        run: echo "tx_multi_payment_old=${{ steps.tx_multi_payment_old.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: Check old xyk version
        uses: thebongy/version-check@v1
        with:
          file: pallets/xyk/Cargo.toml
          tagFormat: ${version}
        id: xyk_old
      - name: set version
        run: echo "xyk_old=${{ steps.xyk_old.outputs.releaseVersion }}" >> $GITHUB_ENV

      - uses: actions/checkout@v2
      - run: git fetch --all --tags

      - name: Check node version
        uses: thebongy/version-check@v1
        with:
          file: node/Cargo.toml
          tagFormat: ${version}
        id: node_version
      - name: set version
        run: |
          echo "node_version=${{ steps.node_version.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: update node output
        run: |
          VERSION_UPDATE=$(cat << EOF
          ${{ env.VERSION_UPDATE }}
          node: ${{ env.node_old }} -> ${{ env.node_version }}
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: ${{ env.node_old != env.node_version }}

      - name: Check primitives version
        uses: thebongy/version-check@v1
        with:
          file: primitives/Cargo.toml
          tagFormat: ${version}
        id: primitives_version
      - name: set version
        run: |
          echo "primitives_version=${{ steps.primitives_version.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: update primitives output
        run: |
          VERSION_UPDATE=$(cat << EOF
          ${{ env.VERSION_UPDATE }}
          primitives: ${{ env.primitives_old }} -> ${{ env.primitives_version }}
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: ${{ env.primitives_old != env.primitives_version }}

      - name: Check runtime version
        uses: thebongy/version-check@v1
        with:
          file: runtime/basilisk/Cargo.toml
          tagFormat: ${version}
        id: runtime_version
      - name: set version
        run: |
          echo "runtime_version=${{ steps.runtime_version.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: update runtime output
        run: |
          VERSION_UPDATE=$(cat << EOF
          ${{ env.VERSION_UPDATE }}
          basilisk: ${{ env.runtime_old }} -> ${{ env.runtime_version }}
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: ${{ env.runtime_old != env.runtime_version }}

      - name: Check testing_runtime version
        uses: thebongy/version-check@v1
        with:
          file: runtime/testing-basilisk/Cargo.toml
          tagFormat: ${version}
        id: testing_runtime_version
      - name: set version
        run: |
          echo "testing_runtime_version=${{ steps.testing_runtime_version.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: update testing_runtime output
        run: |
          VERSION_UPDATE=$(cat << EOF
          ${{ env.VERSION_UPDATE }}
          testing basilisk: ${{ env.testing_runtime_old }} -> ${{ env.testing_runtime_version }}
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: ${{ env.testing_runtime_old != env.testing_runtime_version }}

      - name: Check common_runtime version
        uses: thebongy/version-check@v1
        with:
          file: runtime/common/Cargo.toml
          tagFormat: ${version}
        id: common_runtime_version
      - name: set version
        run: |
          echo "common_runtime_version=${{ steps.common_runtime_version.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: update common_runtime output
        run: |
          VERSION_UPDATE=$(cat << EOF
          ${{ env.VERSION_UPDATE }}
          common runtime: ${{ env.common_runtime_old }} -> ${{ env.common_runtime_version }}
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: ${{ env.common_runtime_old != env.common_runtime_version }}


      - name: Check asset_registry version
        uses: thebongy/version-check@v1
        with:
          file: pallets/asset-registry/Cargo.toml
          tagFormat: ${version}
        id: asset_registry_version
      - name: set version
        run: |
          echo "asset_registry_version=${{ steps.asset_registry_version.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: update asset_registry output
        run: |
          VERSION_UPDATE=$(cat << EOF
          ${{ env.VERSION_UPDATE }}
          asset registry: ${{ env.asset_registry_old }} -> ${{ env.asset_registry_version }}
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: ${{ env.asset_registry_old != env.asset_registry_version }}


      - name: Check duster version
        uses: thebongy/version-check@v1
        with:
          file: pallets/duster/Cargo.toml
          tagFormat: ${version}
        id: duster_version
      - name: set version
        run: |
          echo "duster_version=${{ steps.duster_version.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: update duster output
        run: |
          VERSION_UPDATE=$(cat << EOF
          ${{ env.VERSION_UPDATE }}
          duster: ${{ env.duster_old }} -> ${{ env.duster_version }}
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: ${{ env.duster_old != env.duster_version }}


      - name: Check exchange version
        uses: thebongy/version-check@v1
        with:
          file: pallets/exchange/Cargo.toml
          tagFormat: ${version}
        id: exchange_version
      - name: set version
        run: |
          echo "exchange_version=${{ steps.exchange_version.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: update exchange output
        run: |
          VERSION_UPDATE=$(cat << EOF
          ${{ env.VERSION_UPDATE }}
          exchange: ${{ env.exchange_old }} -> ${{ env.exchange_version }}
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: ${{ env.exchange_old != env.exchange_version }}

      - name: Check lbp version
        uses: thebongy/version-check@v1
        with:
          file: pallets/lbp/Cargo.toml
          tagFormat: ${version}
        id: lbp_version
      - name: set version
        run: |
          echo "lbp_version=${{ steps.lbp_version.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: update lbp output
        run: |
          VERSION_UPDATE=$(cat << EOF
          ${{ env.VERSION_UPDATE }}
          LBP: ${{ env.lbp_old }} -> ${{ env.lbp_version }}
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: ${{ env.lbp_old != env.lbp_version }}

      - name: Check nft version
        uses: thebongy/version-check@v1
        with:
          file: pallets/nft/Cargo.toml
          tagFormat: ${version}
        id: nft
      - name: set version
        run: |
          echo "nft_version=${{ steps.nft.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: update nft output
        run: |
          VERSION_UPDATE=$(cat << EOF
          ${{ env.VERSION_UPDATE }}
          NFT: ${{ env.nft_old }} -> ${{ env.nft_version }}
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: ${{ env.nft_old != env.nft_version }}

      - name: Check offchain_duster version
        uses: thebongy/version-check@v1
        with:
          file: pallets/offchain-duster/Cargo.toml
          tagFormat: ${version}
        id: offchain_duster
      - name: set version
        run: echo "offchain_duster_version=${{ steps.offchain_duster.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: update offchain_duster output
        run: |
          VERSION_UPDATE=$(cat << EOF
          ${{ env.VERSION_UPDATE }}
          offchain duster: ${{ env.offchain_duster_old }} -> ${{ env.offchain_duster_version }}
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: ${{ env.offchain_duster_old != env.offchain_duster_version }}

      - name: Check tx_multi_payment version
        uses: thebongy/version-check@v1
        with:
          file: pallets/transaction-multi-payment/Cargo.toml
          tagFormat: ${version}
        id: tx_multi_payment
      - name: set version
        run: |
          echo "tx_multi_payment_version=${{ steps.tx_multi_payment.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: update tx_multi_payment output
        run: |
          VERSION_UPDATE=$(cat << EOF
          ${{ env.VERSION_UPDATE }}
          transaction multi payment: ${{ env.tx_multi_payment_old }} -> ${{ env.tx_multi_payment_version }}
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: ${{ env.tx_multi_payment_old != env.tx_multi_payment_version }}

      - name: Check xyk version
        uses: thebongy/version-check@v1
        with:
          file: pallets/xyk/Cargo.toml
          tagFormat: ${version}
        id: xyk
      - name: set version
        run: |
          echo "xyk_version=${{ steps.xyk.outputs.releaseVersion }}" >> $GITHUB_ENV

      - name: update xyk output
        run: |
          VERSION_UPDATE=$(cat << EOF
          ${{ env.VERSION_UPDATE }}
          XYK: ${{ env.xyk_old }} -> ${{ env.xyk_version }}
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: ${{ env.xyk_old != env.xyk_version }}


      - name: Sticky Pull Request Comment
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        with:
          message: |
            Version changes:
            ${{ env.VERSION_UPDATE }}