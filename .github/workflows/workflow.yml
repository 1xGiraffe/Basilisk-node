name: build-and-deploy
on:
  push:
    branches:
      - testnet-automation
  workflow_dispatch:
  pull_request:

jobs:
  pop-runner-instance:
    name: create and setup infrastructure for branch
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      IS_LOCAL: ${{ github.event.pull_request.head.repo.fork == false }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_SECRET: ${{ secrets.EC2_PWD }}
      S3_BACKEND_KEY_NAME: tf-state-${{ github.sha }}
    outputs:
      runner: ${{ steps.determine-runner.outputs.runner }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - id: determine-runner
        name: Determine runner
        run: if $IS_LOCAL; then echo "::set-output name=runner::${{ github.sha }}"; else echo "::set-output name=runner::ubuntu-latest"; fi;
      - name: checkout code
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: actions/checkout@v2.1.0
      - name: setup node
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: hashicorp/setup-terraform@v1
        if: ${{ env.IS_LOCAL == 'true' }}
        with:
          terraform_version: 0.12.25
      - name: rewrite tf state key
        id: tf-state-key
        if: ${{ env.IS_LOCAL == 'true' }}
        working-directory: ./infrastructure
        run: sed -i 's/BRANCH_ACTOR_KEY/${{ env.S3_BACKEND_KEY_NAME }}/g' infra.tf
      - name: Terraform Init
        if: ${{ env.IS_LOCAL == 'true' }}
        id: init
        working-directory: ./infrastructure
        run: terraform init
      - name: Terraform plan
        if: ${{ env.IS_LOCAL == 'true' }}
        id: plan
        working-directory: ./infrastructure
        run: terraform plan -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ steps.determine-runner.outputs.runner }}"
      - name: Terraform apply
        if: ${{ env.IS_LOCAL == 'true' }}
        id: apply
        working-directory: ./infrastructure
        run: terraform apply -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ steps.determine-runner.outputs.runner }}" -auto-approve
      - name: Sleep for 20 seconds
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: jakejarvis/wait-action@master
        with:
          time: '20s'

  destroy-runner-instance:
    name: destroy runner
    runs-on: ubuntu-latest
    needs: build-and-publish-docker-image
    if: ${{ always() && github.event.pull_request.head.repo.fork == false }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_SECRET: ${{ secrets.EC2_PWD }}
      S3_BACKEND_KEY_NAME: tf-state-${{ github.sha }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.25
          continue-on-error: false
      - name: rewrite tf state key
        id: tf-state-key
        working-directory: ./infrastructure
        run: sed -i 's/BRANCH_ACTOR_KEY/${{ env.S3_BACKEND_KEY_NAME }}/g' infra.tf

      - name: Terraform Init
        id: init
        working-directory: ./infrastructure
        run: terraform init
        continue-on-error: false

      - name: Terraform apply
        id: apply
        working-directory: ./infrastructure
        run: terraform destroy -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ needs.pop-runner-instance.outputs.runner }}" -auto-approve
        continue-on-error: false
  
  build-and-publish-docker-image:
    needs: pop-runner-instance
    runs-on: ${{ needs.pop-runner-instance.outputs.runner }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      ECR_URL: 601305236792.dkr.ecr.eu-west-1.amazonaws.com
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Configure AWS CLI
        run: |
          sudo apt-get -y update
          sudo apt-get -y install awscli
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }}; aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }}; aws configure set default.region eu-west-1    
      - uses: actions/download-artifact@v2
        name: Download basilisk binary
        with:
          name: basilisk
          path: .
      - name: Add execution for basilisk
        run: chmod +x basilisk
      - name: Sleep for 60 seconds
        run: sleep 60
      - name: install docker
        run: sudo snap install docker
      - name: Sleep for 30 seconds
        run: sleep 30s
      - name: build docker image
        run: sudo docker build -t basilisk:latest .
      - name: get ecr credentials
        run: aws ecr get-login-password --region eu-west-1 | sudo docker login --username AWS --password-stdin ${{ env.ECR_URL }}
      - name: push image to ecr repository
        run: sudo docker tag basilisk:latest ${{ env.ECR_URL }}/basilisk
      - run: sudo docker push ${{ env.ECR_URL }}/basilisk:latest
  