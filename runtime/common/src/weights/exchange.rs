// This file is part of Basilisk-node.

// Copyright (C) 2020-2022  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_exchange
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-06, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/basilisk
// benchmark
// --chain=dev
// --steps=5
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=.maintain/pallet-weight-template-no-back.hbs
// --pallet=pallet_exchange
// --output=exchange.rs
// --extrinsic=*
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use pallet_exchange::weights::WeightInfo;

pub struct BasiliskWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for BasiliskWeight<T> {
	fn known_overhead_for_on_finalize() -> Weight {
		Weight::from_ref_time(8_853_000 as u64).saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	fn sell_intention() -> Weight {
		Weight::from_ref_time(103_523_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn buy_intention() -> Weight {
		Weight::from_ref_time(105_227_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn on_finalize(t: u32) -> Weight {
		Weight::from_ref_time(0 as u64) // Standard Error: 95_000
			.saturating_add(Weight::from_ref_time(51_422_000 as u64).saturating_mul(t as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(t as u64)))
	}
	fn on_finalize_buys_no_matches(t: u32) -> Weight {
		Weight::from_ref_time(0 as u64) // Standard Error: 95_000
			.saturating_add(Weight::from_ref_time(92_057_000 as u64).saturating_mul(t as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((3 as u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(t as u64)))
	}
	fn on_finalize_sells_no_matches(t: u32) -> Weight {
		Weight::from_ref_time(1_118_000 as u64) // Standard Error: 56_000
			.saturating_add(Weight::from_ref_time(84_692_000 as u64).saturating_mul(t as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((3 as u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(t as u64)))
	}
	fn sell_extrinsic() -> Weight {
		Weight::from_ref_time(110_192_000 as u64)
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	fn on_finalize_for_one_sell_extrinsic() -> Weight {
		Weight::from_ref_time(142_574_000 as u64)
			.saturating_add(T::DbWeight::get().reads(15 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	fn buy_extrinsic() -> Weight {
		Weight::from_ref_time(109_648_000 as u64)
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	fn on_finalize_for_one_buy_extrinsic() -> Weight {
		Weight::from_ref_time(150_762_000 as u64)
			.saturating_add(T::DbWeight::get().reads(15 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
}
