// This file is part of Basilisk.

// Copyright (C) 2020-2023  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_xcm
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-30, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/basilisk
// benchmark
// pallet
// --pallet=pallet-xcm
// --chain=dev
// --extrinsic=*
// --steps=5
// --repeat=20
// --output
// xcm.rs
// --template
// .maintain/pallet-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_xcm.
pub trait WeightInfo {
	fn send() -> Weight;
	fn teleport_assets() -> Weight;
	fn reserve_transfer_assets() -> Weight;
	fn execute() -> Weight;
	fn force_xcm_version() -> Weight;
	fn force_default_xcm_version() -> Weight;
	fn force_subscribe_version_notify() -> Weight;
	fn force_unsubscribe_version_notify() -> Weight;
	fn migrate_supported_version() -> Weight;
	fn migrate_version_notifiers() -> Weight;
	fn already_notified_target() -> Weight;
	fn notify_current_targets() -> Weight;
	fn notify_target_migration_fail() -> Weight;
	fn migrate_version_notify_targets() -> Weight;
	fn migrate_and_notify_old_targets() -> Weight;
}

/// Weights for pallet_xcm using the hydraDX node and recommended hardware.
pub struct BasiliskWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for BasiliskWeight<T> {
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn send() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000 as u64)
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn teleport_assets() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000 as u64)
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn reserve_transfer_assets() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000 as u64)
	}
	fn execute() -> Weight {
		// Minimum execution time: 5_230 nanoseconds.
		Weight::from_ref_time(5_447_000 as u64)
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn force_xcm_version() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000 as u64)
	}
	// Storage: PolkadotXcm SafeXcmVersion (r:0 w:1)
	// Proof Skipped: PolkadotXcm SafeXcmVersion (max_values: Some(1), max_size: None, mode: Measured)
	fn force_default_xcm_version() -> Weight {
		// Minimum execution time: 1_897 nanoseconds.
		Weight::from_ref_time(1_989_000 as u64).saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn force_subscribe_version_notify() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000 as u64)
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn force_unsubscribe_version_notify() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000 as u64)
	}
	// Storage: PolkadotXcm SupportedVersion (r:4 w:2)
	// Proof Skipped: PolkadotXcm SupportedVersion (max_values: None, max_size: None, mode: Measured)
	fn migrate_supported_version() -> Weight {
		// Minimum execution time: 14_018 nanoseconds.
		Weight::from_ref_time(14_422_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: PolkadotXcm VersionNotifiers (r:4 w:2)
	// Proof Skipped: PolkadotXcm VersionNotifiers (max_values: None, max_size: None, mode: Measured)
	fn migrate_version_notifiers() -> Weight {
		// Minimum execution time: 14_596 nanoseconds.
		Weight::from_ref_time(15_090_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn already_notified_target() -> Weight {
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_ref_time(25_000_000 as u64)
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn notify_current_targets() -> Weight {
		// Minimum execution time: 325_000 nanoseconds.
		Weight::from_ref_time(325_000_000 as u64)
	}
	// Storage: PolkadotXcm VersionNotifyTargets (r:3 w:0)
	// Proof Skipped: PolkadotXcm VersionNotifyTargets (max_values: None, max_size: None, mode: Measured)
	fn notify_target_migration_fail() -> Weight {
		// Minimum execution time: 6_796 nanoseconds.
		Weight::from_ref_time(6_950_000 as u64).saturating_add(T::DbWeight::get().reads(3 as u64))
	}
	// Storage: PolkadotXcm VersionNotifyTargets (r:4 w:2)
	// Proof Skipped: PolkadotXcm VersionNotifyTargets (max_values: None, max_size: None, mode: Measured)
	fn migrate_version_notify_targets() -> Weight {
		// Minimum execution time: 14_944 nanoseconds.
		Weight::from_ref_time(15_562_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn migrate_and_notify_old_targets() -> Weight {
		// Minimum execution time: 325_000 nanoseconds.
		Weight::from_ref_time(325_000_000 as u64)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn send() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000 as u64)
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn teleport_assets() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000 as u64)
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn reserve_transfer_assets() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000 as u64)
	}
	fn execute() -> Weight {
		// Minimum execution time: 5_230 nanoseconds.
		Weight::from_ref_time(5_447_000 as u64)
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn force_xcm_version() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000 as u64)
	}
	// Storage: PolkadotXcm SafeXcmVersion (r:0 w:1)
	// Proof Skipped: PolkadotXcm SafeXcmVersion (max_values: Some(1), max_size: None, mode: Measured)
	fn force_default_xcm_version() -> Weight {
		// Minimum execution time: 1_897 nanoseconds.
		Weight::from_ref_time(1_989_000 as u64).saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn force_subscribe_version_notify() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000 as u64)
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn force_unsubscribe_version_notify() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000 as u64)
	}
	// Storage: PolkadotXcm SupportedVersion (r:4 w:2)
	// Proof Skipped: PolkadotXcm SupportedVersion (max_values: None, max_size: None, mode: Measured)
	fn migrate_supported_version() -> Weight {
		// Minimum execution time: 14_018 nanoseconds.
		Weight::from_ref_time(14_422_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: PolkadotXcm VersionNotifiers (r:4 w:2)
	// Proof Skipped: PolkadotXcm VersionNotifiers (max_values: None, max_size: None, mode: Measured)
	fn migrate_version_notifiers() -> Weight {
		// Minimum execution time: 14_596 nanoseconds.
		Weight::from_ref_time(15_090_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn already_notified_target() -> Weight {
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_ref_time(25_000_000 as u64)
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn notify_current_targets() -> Weight {
		// Minimum execution time: 325_000 nanoseconds.
		Weight::from_ref_time(325_000_000 as u64)
	}
	// Storage: PolkadotXcm VersionNotifyTargets (r:3 w:0)
	// Proof Skipped: PolkadotXcm VersionNotifyTargets (max_values: None, max_size: None, mode: Measured)
	fn notify_target_migration_fail() -> Weight {
		// Minimum execution time: 6_796 nanoseconds.
		Weight::from_ref_time(6_950_000 as u64).saturating_add(RocksDbWeight::get().reads(3 as u64))
	}
	// Storage: PolkadotXcm VersionNotifyTargets (r:4 w:2)
	// Proof Skipped: PolkadotXcm VersionNotifyTargets (max_values: None, max_size: None, mode: Measured)
	fn migrate_version_notify_targets() -> Weight {
		// Minimum execution time: 14_944 nanoseconds.
		Weight::from_ref_time(15_562_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn migrate_and_notify_old_targets() -> Weight {
		// Minimum execution time: 325_000 nanoseconds.
		Weight::from_ref_time(325_000_000 as u64)
	}
}
