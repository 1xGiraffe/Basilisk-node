// This file is part of Basilisk-node.

// Copyright (C) 2020-2021  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_scheduler
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-02, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/basilisk
// benchmark
// pallet
// --chain=dev
// --steps=5
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=.maintain/pallet-weight-template-no-back.hbs
// --pallet=pallet_scheduler
// --output=scheduler.rs
// --extrinsic=*
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use pallet_scheduler::weights::WeightInfo;

pub struct BasiliskWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for BasiliskWeight<T> {
	fn on_initialize_periodic_named_resolved(s: u32) -> Weight {
		Weight::from_ref_time(23_591_000 as u64) // Standard Error: 66_000
			.saturating_add(Weight::from_ref_time(32_358_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((3 as u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((4 as u64).saturating_mul(s as u64)))
	}
	fn on_initialize_named_resolved(s: u32) -> Weight {
		Weight::from_ref_time(26_942_000 as u64) // Standard Error: 55_000
			.saturating_add(Weight::from_ref_time(25_909_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((3 as u64).saturating_mul(s as u64)))
	}
	fn on_initialize_periodic_resolved(s: u32) -> Weight {
		Weight::from_ref_time(23_715_000 as u64) // Standard Error: 65_000
			.saturating_add(Weight::from_ref_time(27_598_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((3 as u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((3 as u64).saturating_mul(s as u64)))
	}
	fn on_initialize_resolved(s: u32) -> Weight {
		Weight::from_ref_time(24_314_000 as u64) // Standard Error: 53_000
			.saturating_add(Weight::from_ref_time(24_153_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(s as u64)))
	}
	fn on_initialize_named_aborted(s: u32) -> Weight {
		Weight::from_ref_time(13_889_000 as u64) // Standard Error: 15_000
			.saturating_add(Weight::from_ref_time(10_380_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	fn on_initialize_aborted(s: u32) -> Weight {
		Weight::from_ref_time(14_566_000 as u64) // Standard Error: 22_000
			.saturating_add(Weight::from_ref_time(6_133_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn on_initialize_periodic_named(s: u32) -> Weight {
		Weight::from_ref_time(23_864_000 as u64) // Standard Error: 47_000
			.saturating_add(Weight::from_ref_time(18_442_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(s as u64)))
	}
	fn on_initialize_periodic(s: u32) -> Weight {
		Weight::from_ref_time(21_903_000 as u64) // Standard Error: 26_000
			.saturating_add(Weight::from_ref_time(13_843_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	fn on_initialize_named(s: u32) -> Weight {
		Weight::from_ref_time(22_761_000 as u64) // Standard Error: 31_000
			.saturating_add(Weight::from_ref_time(12_654_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	fn on_initialize(s: u32) -> Weight {
		Weight::from_ref_time(23_053_000 as u64) // Standard Error: 30_000
			.saturating_add(Weight::from_ref_time(10_555_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn schedule(s: u32) -> Weight {
		Weight::from_ref_time(30_634_000 as u64) // Standard Error: 10_000
			.saturating_add(Weight::from_ref_time(207_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn cancel(s: u32) -> Weight {
		Weight::from_ref_time(31_357_000 as u64) // Standard Error: 8_000
			.saturating_add(Weight::from_ref_time(1_921_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn schedule_named(s: u32) -> Weight {
		Weight::from_ref_time(35_426_000 as u64) // Standard Error: 13_000
			.saturating_add(Weight::from_ref_time(277_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn cancel_named(s: u32) -> Weight {
		Weight::from_ref_time(33_672_000 as u64) // Standard Error: 17_000
			.saturating_add(Weight::from_ref_time(1_993_000 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
