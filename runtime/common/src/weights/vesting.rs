// This file is part of Basilisk.

// Copyright (C) 2020-2023  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for orml_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-01, STEPS: 5, REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/basilisk
// benchmark
// pallet
// --pallet=orml-vesting
// --chain=dev
// --extrinsic=*
// --steps=5
// --repeat=20
// --output
// vesting.rs
// --template
// .maintain/pallet-weight-template-no-back.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use orml_vesting::weights::WeightInfo;

pub struct BasiliskWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for BasiliskWeight<T> {
	// Storage: Vesting VestingSchedules (r:1 w:1)
	// Proof: Vesting VestingSchedules (max_values: None, max_size: Some(469), added: 2944, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn vested_transfer() -> Weight {
        // Minimum execution time: 45_615 nanoseconds.
        Weight::from_ref_time(46_574_000 as u64)            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(4 as u64))
    }
	// Storage: Vesting VestingSchedules (r:1 w:1)
	// Proof: Vesting VestingSchedules (max_values: None, max_size: Some(469), added: 2944, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 15]`.
    fn claim(i: u32, ) -> Weight {
        // Minimum execution time: 37_873 nanoseconds.
        Weight::from_ref_time(38_786_783 as u64)            // Standard Error: 9_805
            .saturating_add(Weight::from_ref_time(83_184 as u64).saturating_mul(i as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: Vesting VestingSchedules (r:0 w:1)
	// Proof: Vesting VestingSchedules (max_values: None, max_size: Some(469), added: 2944, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 15]`.
    fn update_vesting_schedules(i: u32, ) -> Weight {
        // Minimum execution time: 28_006 nanoseconds.
        Weight::from_ref_time(28_815_764 as u64)            // Standard Error: 7_802
            .saturating_add(Weight::from_ref_time(95_130 as u64).saturating_mul(i as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
}
