// This file is part of Basilisk.

// Copyright (C) 2020-2023  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `cumulus_pallet_xcmp_queue`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-06, STEPS: `10`, REPEAT: `30`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bench-bot`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// target/release/basilisk
// benchmark
// pallet
// --chain=dev
// --steps=10
// --repeat=30
// --wasm-execution=compiled
// --heap-pages=4096
// --template=.maintain/pallet-weight-template-no-back.hbs
// --pallet=cumulus-pallet-xcmp-queue
// --output=weights-1.1.0/xcmp_queue.rs
// --extrinsic=*

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

use cumulus_pallet_xcmp_queue::weights::WeightInfo;

pub struct BasiliskWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for BasiliskWeight<T> {
	/// Storage: `XcmpQueue::QueueConfig` (r:1 w:1)
	/// Proof: `XcmpQueue::QueueConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_config_with_u32() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 8_755_000 picoseconds.
		Weight::from_parts(8_941_000, 1594)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	fn enqueue_xcmp_message() -> Weight {
		//TODO:THIS WEIGHT IS ADDED FOR TESTING PURPOSES, ADD PROPER WEIGHT
		Weight::from_parts(9999999, 9999)
	}

	fn suspend_channel() -> Weight {
		//TODO:THIS WEIGHT IS ADDED FOR TESTING PURPOSES, ADD PROPER WEIGHT
		Weight::from_parts(9999999, 9999)
	}

	fn resume_channel() -> Weight {
		//TODO:THIS WEIGHT IS ADDED FOR TESTING PURPOSES, ADD PROPER WEIGHT
		Weight::from_parts(9999999, 9999)
	}

	fn take_first_concatenated_xcm() -> Weight {
		//TODO:THIS WEIGHT IS ADDED FOR TESTING PURPOSES, ADD PROPER WEIGHT
		Weight::from_parts(9999999, 9999)
	}

	fn on_idle_good_msg() -> Weight {
		//TODO:THIS WEIGHT IS ADDED FOR TESTING PURPOSES, ADD PROPER WEIGHT
		Weight::from_parts(9999999, 9999)
	}

	fn on_idle_large_msg() -> Weight {
		//TODO:THIS WEIGHT IS ADDED FOR TESTING PURPOSES, ADD PROPER WEIGHT
		Weight::from_parts(9999999, 9999)
	}
}
